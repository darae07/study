# c언어의 pointer 개념

## 한줄 요약

메모리가 어떻게 운영되는가 하는 문제. 메모리를 낭비하지 않고 주소값만 넘겨줄 수 있게 하는게 포인터다.

---

magnaged 언어는 메모리 관리를 언어가 해주지만 개발자로부터 메모리 관리를 감춰놓게 된다. unmanaged 언어는 메모리 관리를 가비지 컬렉터가 아닌 사용자가 직접 해주는 언어이다. 이에 사용되는 도구중 하나가 포인터. 포인터는 메모리에 직접적으로 접근해서 제어할 수 있게 해주는 도구다.

변수에 저장된 값들은 메모리의 어딘가에 저장된다. 프로그램을 짜다 보면 변수에 지정한 값을 다른 여러 곳에서 써야 할 때가 있다.
마치 사람들끼리 문서를 공유할 때 일일히 배껴 적어주는 것은 종이 낭비며 페이지 번호만 알려주면 되는 것과 같다.

c에서 함수에 인자로 변수가 넘겨질때 그 값이 복사되어서 넘어가게 된다. 복사된다는 것은 메모리 어딘가에 그 크기만큼 중복된 값이 차지한다는 것. 메모리를 낭비하지 않고 주소값만 넘겨줄 수 있게 하는게 포인터다. 포인터는 주소값. 메모리상 변수의 위치를 가리킨다. 포인터 변수로 하여금 변수의 위치를 가리키게 하는 코드 형식

변수에 쓰이는 메모리는 어떤 자료형이냐에 따라 크기가 다르다. 이 때문에 포인터를 지정할 때 자료형도 명기한다. 포인터에 저장된 주소값으로 부터 몇개의 비트들을 읽어내야 하는지를 의미한다.

포인터에 값을 더하면 자료형의 크기 곱하기 그 값만큼 오른쪽으로 이동한다. 컴퓨터 메모리에 변수는 임의의 위치에 저장되기 때문에 포인터 값을 잘못 변경하면 엉뚱한 주소를 가리키게 된다.

값들이 나란히 연속으로 배열되는 때는 배열 자료구조를 사용했을 때다. 포인터는 배열과 연계되어 사용할 수 있다.

함수의 인자로 포인터 변수를 넘겨주면 변수가 함수에 의해 값이 변경된다. 인자로 변수를 넘겨주면 값이 복사되어 원본은 변경되지 않지만 포인터로 넘겨주면 위치만 넘겨준다. 이를 참조에의한 호출이라고 한다. managed 언어에서는 이 부분이 자동적으로 이뤄지고 있다.

c에서 포인터의 효용을 살린 예시는 연결리스트(linked list)다. c 배열은 지정된 자료형에 따라 여러 값을 담을 수 있지만 그 전체 크기가 정해져 있다는 한계가 있다. 배열을 만들었을 때, 값이 언제 얼마나 더 추가될지 예측할 수 없을때 malloc으로 그때그때 동적으로 공간을 늘려서 전체를 복사할 수도 있지만 에너지 소모가 크다. 또한 배열 중간에 값을 삽입해야 할 때는 n의 시간복잡도가 발생한다. 연결리스트는 추가 삭제가 자유로우며 상수 시간복잡도를 가진다. c로 짠 연결리스트의 요소는 자신의 값과 다음 요소를 가리키는 next란 포인터를 가지는 struct다. 다음 값이 새 요소로 생성되면 이전 요소의 next 포인터는 이 새 요소의 주소로 위치를 지정한다. 중간 삽입 역시 이전과 다음 요소의 포인터를 지정하면 되기 때문에 상수 시간복잡도를 가진다. 이 원리를 이용하여 이중 연결 리스트(doubly linked list), circular linked list도 구현할 수 있다.

struct는 구조체로서 사용자가 c언어의 기본 타입을 가지고 새롭게 정의할 수 있는 사용자 정의 타입이다. 변수(멤버)를 포함하는 자료구조이다. 구조체는 struct 키워드로 정의하며 변수로 선언해서 사용한다.

malloc은 c의 함수로서 요청된 사이즈를 할당하고 그 포인터를 반환한다.

## malloc 함수

malloc 함수는 memory allocation의 약자로 인수로 받은 크기만큼의 메모리를 할당한 포인터 변수를 반환한다. stdib.h라는 헤더 파일이 필요하다.

calloc 함수는 contiguous allocation의 약자로, malloc 함수와의 차이점은 malloc 함수는 메모리 공간만 할당해서 주고 calloc 함수는 내부 값을 초기화해서 준다. malloc으로 할당받은 메모리는 쓰레기 값이 존재할 수 있다.

realloc 함수는 기존에 할당받은 메모리를 재할당할 수 있다. 즉 할당받은 메모리를 변경한다.

## 궁금증

c에서는 가변값과 불변값이 어떻게 정의되는지? 자바스크립트에서는 변수에는 타입이 없지만 값에는 타입이 있다. 값은 원시타입과 객체타입으로 구분되며 원시타입은 불변값이고 객체타입은 가변값이다. 객체, 배열 등 객체타입을 가진 값은 변경이 가능하며 다른 변수에 할당하거나 함수의 인자로 전달할 때 값이 아닌 참조값을 넘겨준다. 즉 원본이 변경된다.

-> c에서는 모든 값이 메모리에 직접 접근한다. 원시값도 변경하면 값이 쓰인 메모리에 값이 직접 변경된다. 메모리의 동적 할당을 위해서 포인터가 사용된다. 포인터 변수를 선언할 때는(타입* 변수명) 메모리 주소를 할당받으며, 포인터로 변수를 참조하면(*변수명) 포인터 변수에 저장된 주소값에 저장된 값을 참조한다. &을 사용하면(&변수명) 변수에 저장된 메모리 주소값을 가리킨다. 이를 통해 포인터 변수에 주소값을 전달할수 있다.
